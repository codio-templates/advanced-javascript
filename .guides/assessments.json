[
 {
  "type": "test",
  "taskId": "test-3419488269",
  "source": {
   "name": "Coding Exercise",
   "showName": true,
   "instructions": "Write a program that outputs `Hello world`. Your program must do the following things:\n\n* Use two variables, one with `\"Hello\"` and the other with `\"world\"`.\n* Use a single `console.log`.",
   "command": "python3 .guides/secure/custom_code_test.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Here is one possible solution:\n\n```javascript\nlet var1 = \"Hello\"\nlet var2 = \" world\"\nconsole.log(var1 + var2)\n```\n\nRemember to use ES6 syntax (`let` instead of `var`). Declare one variable with the value `\"Hello\"` and another variable with the value `\" world\"`. Use the `+` operator for string concatenation.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "student_code/custom_test.js"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "student_code/custom_test.js"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-2420108225",
  "source": {
   "name": "Unit Test Example",
   "showName": true,
   "instructions": "Write a function called `circleArea` that takes a parameter for the radius. The function should return the area of a circle for the given radius. Your program should throw the error `Radius must be a number` when a non-numeric value is passed to the function. It should also throw the error `Radius must be a positive number` when a negative number is passed to `circleArea`.\n\nSubmit your code to be evaluated.",
   "command": "python3 .guides/secure/jest_helper.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "Here is one possible solution:\n\n```javascript\nfunction circleArea(radius){\n  if (typeof radius !== \"number\") {\n    throw \"Radius must be a number\"\n  }\n  if (radius < 0) {\n    throw \"Radius must be a positive number\"\n  }\n  return Math.PI * Math.pow(radius, 2)\n}\n\nmodule.exports = circleArea\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "student_code/circleArea.js"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "student_code/circleArea.js"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-3198803100",
  "source": {
   "name": "JSLint Example",
   "showName": true,
   "instructions": "Click the button below to check your code for stylistic errors.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"javascript\",\"subtype\":\"jslint\",\"files\":[\"student_code/jslint_example.js\"],\"partialPoints\":false,\"maxPoints\":1}",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 300,
   "guidance": "```javascript\n\"use strict\";\n\nfunction circleArea(radius) {\n    if (typeof radius !== \"number\") {\n        throw \"Radius must be a number\";\n    }\n    if (radius < 0) {\n        throw \"Radius must be a positive number\";\n    }\n    return Math.PI * Math.pow(radius, 2);\n}\n\nmodule.exports = circleArea;",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "student_code/jslint_example.js",
     "student_code/circleArea.js"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "student_code/jslint_example.js"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-3096515005",
  "source": {
   "name": "JSHint Example",
   "showName": true,
   "instructions": "Click the button below to check your code for stylistic errors.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"javascript\",\"subtype\":\"jshint\",\"files\":[\"student_code/jshint_example.js\"],\"partialPoints\":false,\"maxPoints\":1}",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 300,
   "guidance": "Here is the solution:\n\n```javascript\nfunction circleArea(radius){\n  if (typeof radius !== \"number\") {\n    throw \"Radius must be a number\";\n  }\n  if (radius < 0) {\n    throw \"Radius must be a positive number\";\n  }\n  return Math.PI * Math.pow(radius, 2);\n}\n\nmodule.exports = circleArea;\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "student_code/jshint_example.js"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "student_code/jshint_example.js"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-4164966203",
  "source": {
   "name": "Custom Test, Partial Points",
   "showName": true,
   "instructions": "Submit your work to be evaluated.",
   "command": "node .guides/secure/helperPartialCustom.js",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 40,
   "guidance": "Here is one possible solution:\n\n```javascript\nclass Laptop {\n  constructor(manufacturer, size, processor, ram) {\n    this.manufacturer = manufacturer\n    this.size = size\n    this.processor = processor\n    this.ram = ram\n  }\n  \n  printLaptop() {\n    return(`This is a ${this.size}-inch ${this.manufacturer} laptop. It has a ${this.processor} GHz CPU and ${this.ram} GB of RAM.`)\n  }\n}\n\nmodule.exports = Laptop\n```",
   "showGuidanceAfterResponse": true,
   "points": 5,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     ".guides/secure/partialPointsCustom.js",
     "student_code/studentPartialPointsUnit.js",
     ".guides/secure/partial_points_custom.js"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": ".guides/secure/partialPointsCustom.js"
     },
     {
      "type": "file",
      "panelNumber": 1,
      "content": "student_code/studentPartialPointsUnit.js"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-1899921671",
  "source": {
   "name": "Partial Points Unit Test (Jest)",
   "showName": true,
   "instructions": "Write a function called `circleArea` that takes a parameter for the radius. The function should return the area of a circle for the given radius. Your program should throw the error `Radius must be a number` when a non-numeric value is passed to the function. It should also throw the error `Radius must be a positive number` when a negative number is passed to `circleArea`.\n\nSubmit your code to be evaluated.",
   "command": "node .guides/secure/jestHelperPartial.js",
   "arePartialPointsAllowed": true,
   "timeoutSeconds": 40,
   "guidance": "Here is one possible solution:\n\n```javascript\nfunction circleArea(radius){\n  if (typeof radius !== \"number\") {\n    throw \"Radius must be a number\"\n  }\n  if (radius < 0) {\n    throw \"Radius must be a positive number\"\n  }\n  return Math.PI * Math.pow(radius, 2)\n}\n\nmodule.exports = circleArea\n```",
   "showGuidanceAfterResponse": true,
   "points": 3,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "student_code/circleAreaUnit.js"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "student_code/circleAreaUnit.js"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 }
]